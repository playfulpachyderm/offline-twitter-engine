package webserver

import (
  "fmt"
  "html/template"
)

templ ChatViewComponent(go_tpl *template.Template, global_data PageGlobalData, data MessageData) {
  <div id="chat-view">
    // TODO: post-templ-cleanup
    // the whole function can go in an `if data.ActiveRoomID`
    {{ room := global_data.Rooms[data.ActiveRoomID] }}
    if data.ActiveRoomID != "" {
      <div class="chat-header">
        @chat_profile_image(global_data, room)
        <div class="chat-header__buttons-container row">
          if room.Type != "ONE_TO_ONE" {
            // Group chats need an "Info" button
            <a class="button" onclick="toggle_participants_view()" title="Show participants">
              <img class="svg-icon" src="/static/icons/info.svg" width="24" height="24" />
            </a>
          }
          <a class="button"
            href={ templ.URL(fmt.Sprintf("https://twitter.com/messages/%s", room.ID)) }
            target="_blank" title="Open on twitter.com"
          >
            <img class="svg-icon" src="/static/icons/external-link.svg" width="24" height="24" />
          </a>
          <a class="button" hx-post={ fmt.Sprintf("/messages/%s/mark-as-read", room.ID) } title="Mark as read">
            <img class="svg-icon" src="/static/icons/eye.svg" width="24" height="24" />
          </a>
          <a class="button" hx-post={ fmt.Sprintf("/messages/%s?scrape", room.ID) } hx-target="#chat-view" hx-swap="outerHTML" title="Refresh" hx-indicator=".chat-messages">
            <img class="svg-icon" src="/static/icons/refresh.svg" width="24" height="24" />
          </a>
        </div>
      </div>
    }

    <div class="chat-messages">
      if data.ActiveRoomID != "" {
        @conversation_top(global_data, data)
        @messages_with_poller(go_tpl, global_data, data)
      }
      <div class="htmx-spinner">
        <div class="htmx-spinner__background"></div>
        <img class="svg-icon htmx-spinner__icon" src="/static/icons/spinner.svg" />
      </div>
    </div>

    if data.ActiveRoomID != "" {
     <div class="dm-composer">
        // TODO: replying-to CSS re-use is a mess
        <div id="composerReplyingTo" class="dm-composer__replying-to-container">
          <div class="dm-replying-to row row--spread">
            <div>
              <div class="dm-replying-to__label labelled-icon">
                <img class="svg-icon" src="/static/icons/replying_to.svg" width="24" height="24" />
                <label>Replying to</label>
              </div>
              <div class="dm-replying-to__preview-text"
                data-replying-to-message-id=""
                onclick="handleReplyingToClicked(this)"
              >
                Lorem ipsum dolor sit amet
              </div>
            </div>
            <img class="svg-icon button" src="/static/icons/close.svg" width="24" height="24" onclick="cancel_reply()">
          </div>
        </div>

        <form
          hx-post={ fmt.Sprintf("/messages/%s/send?latest_timestamp=%d", data.ActiveRoomID, data.LatestPollingTimestamp) }
          hx-target="#new-messages-poller"
          hx-swap="outerHTML scroll:.chat-messages:bottom"
          hx-ext="json-enc"
          hx-on:htmx:after-request="composer.innerText = ''; realInput.value = ''; cancel_reply();"
        >
          <img class="svg-icon button" src="/static/icons/emoji-insert.svg" width="24" height="24" onclick="
            var carat = composer.innerText.length;
            if (composer.contains(window.getSelection().anchorNode)) {
              carat = window.getSelection().anchorOffset;
            }
            show_emoji_picker(function(emoji) {
              composer.innerText = composer.innerText.substring(0, carat) + emoji.unicode + composer.innerText.substring(carat);
              composer.oninput(); // force-update the `realInput`
              let range = document.createRange();
              range.setStart(composer.childNodes[0], carat+emoji.unicode.length);
              range.setEnd(composer.childNodes[0], carat+emoji.unicode.length);
              let selection = window.getSelection();
              selection.removeAllRanges();
              selection.addRange(range);
              composer.focus();
            });
          "/>
          <span id="composer" role="textbox" contenteditable oninput="realInput.value = this.innerText"></span>
          <input id="realInput" type="hidden" name="text" value="" />
          <input id="inReplyToInput" type="hidden" name="in_reply_to_id" value="" />
          <input type="submit" />
        </form>
      </div>
      <script>
        /**
         *  Make pasting text work for HTML as well as plain text
         */
        composer.addEventListener("paste", function(e) {
          // cancel paste
          e.preventDefault();
          // get text representation of clipboard
          var text = (e.originalEvent || e).clipboardData.getData('text/plain');
          // insert text manually
          document.execCommand("insertHTML", false, text);
        });

        /**
         * Handle "Reply" button
         */
        function handle_reply_clicked(reply_to_message_id) {
          composerReplyingTo.classList.add("unhidden");
          inReplyToInput.value = reply_to_message_id;
          console.log(reply_to_message_id);
          const message_text_element = document.querySelector('[data-message-id="' + reply_to_message_id + '"] .dm-message__text-content');
          const preview_text = message_text_element.innerText;
          const preview_element = composerReplyingTo.querySelector('.dm-replying-to__preview-text');
          preview_element.innerText = preview_text;
          preview_element.setAttribute("data-replying-to-message-id", reply_to_message_id);
        }
        /**
         * Handle cancel-reply button
         */
        function cancel_reply() {
          composerReplyingTo.classList.remove("unhidden");
          inReplyToInput.value = "";
        }
      </script>

      if room.Type != "ONE_TO_ONE" {
        <div class="groupchat-participants-list">
          <div class="header row">
            <a onclick="toggle_participants_view()" class="button back-button">
              <img class="svg-icon" src="/static/icons/back.svg" width="24" height="24">
            </a>
            <h3>People</h3>
          </div>
          @UsersListComponent(global_data, room.GetParticipantIDs(), "", "")
        </div>
      }
    }
  </div>

  <dialog id="emoji_popup" onmousedown="event.button == 0 && event.target==this && close_emoji_picker()"></dialog>

  <script>
    /**
     * When new messages are loaded in (via polling), they should be scrolled into view.
     * However, if the user has scrolled up in the conversation, they shouldn't be.
     * Also, when the conversation is opened, we should start at the bottom by default.
     */
    (function () {  // Wrap it all in an IIFE to avoid namespace pollution
      const chat_messages = document.querySelector('.chat-messages');

      // Disable auto-scroll-bottom on new message loads if the user has scrolled up
      chat_messages.addEventListener('scroll', function() {
        const _node = document.querySelector("#new-messages-poller");
        const node = _node.cloneNode(true)
        _node.remove(); // Removing and re-inserting the element cancels the HTMX polling, otherwise it will use the old values
        const scroll_bottom_input = node.querySelector("input[name='scroll_bottom']")

        const scrollPosition = chat_messages.scrollTop;
        var bottomOfElement = chat_messages.scrollHeight - chat_messages.clientHeight;

        if (scrollPosition === bottomOfElement) {
          // At bottom; new messages should be scrolled into view
          node.setAttribute("hx-swap", "outerHTML scroll:.chat-messages:bottom");
          scroll_bottom_input.value = 1;
        } else {
          // User has scrolled up; disable auto-scrolling when new messages arrive
          node.setAttribute("hx-swap", "outerHTML");
          scroll_bottom_input.value = 0;
        }

        chat_messages.appendChild(node);
        htmx.process(node); // Manually enable HTMX on the manually-added node
      });

      // Scroll to the bottom of the chat window on initial page load
      chat_messages.scrollTop = chat_messages.scrollHeight;
    })();

    /**
     * Define callback on-click handler for 'replying-to' previews; they should scroll the replied-to
     * message into view, if possible.
     *
     * Takes an element holding the data instead of the data itself, because the composer box and
     * actual messages share this function; the composer box's "data-replying-to-message-id" can
     * change.
     */
    function handleReplyingToClicked(replying_to_box) {
      const replied_to_id = replying_to_box.getAttribute("data-replying-to-message-id");
      const replied_to_message = document.querySelector('[data-message-id="' + replied_to_id + '"]');

      replied_to_message.scrollIntoView({behavior: "smooth", block: "center"});
      replied_to_message.classList.add("highlighted");
      setTimeout(function() {
        replied_to_message.classList.remove("highlighted");
      }, 1000);
    }

    /**
     * Show or hide the Participants view
     */
    function toggle_participants_view() {
      const panel = document.querySelector(".groupchat-participants-list");
      if (panel.classList.contains("unhidden")) {
        panel.classList.remove("unhidden");
      } else {
        panel.classList.add("unhidden");
      }
    }

    /**
     * When the emoji-react button is clicked, show the emoji picker
     */
    function show_emoji_picker(emoji_callback) {
      const PickerElement = customElements.get("emoji-picker"); // Not copied into the namespace by default
      const picker = new PickerElement();
      picker.addEventListener('emoji-click', function(emoji_event) {
        close_emoji_picker();
        emoji_callback(emoji_event.detail)
      });
      emoji_popup.appendChild(picker);
      emoji_popup.showModal();
    }
    /**
     * Callback function to close the emoji picker
     */
    function close_emoji_picker() {
      emoji_popup.close();
      emoji_popup.innerHTML = ""; // remove the picker
    }

    // Callback function: If a chat image hasn't been downloaded, wait 500ms and try again
    function img_load_err(err_event, img) {
      // TODO: if (isHTTP404(e)) {...}
      console.log(img);
      console.log(err_event);
      var retries = parseInt(img.getAttribute("data-retries") ?? 0);
      if (retries < 5) {
        img.setAttribute("data-retries", retries + 1);
        setTimeout(() => {img.src = img.src;}, 500);
      }
    }
  </script>
}

templ conversation_top(global_data PageGlobalData, data MessageData) {
  <div class="show-more conversation-top">
    if data.Cursor.CursorPosition.IsEnd() {
      <label class="show-more__eof-label">Beginning of conversation</label>
    } else {
      // TODO: this might require a `cursor_to_query_params` if the same view is used for searching
      <a class="show-more__button button"
        hx-get={ fmt.Sprintf("?cursor=%d", data.Cursor.CursorValue) }
        hx-target=".conversation-top"
        hx-swap="outerHTML"
      >Show more</a>
    }
  </div>
}
