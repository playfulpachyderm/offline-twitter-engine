package webserver

import (
	"bytes"
	"context"
	"html/template"
	"net/http"
	"net/http/httptest"
	"github.com/Masterminds/sprig/v3"

	diffs "gitlab.com/offline-twitter/twitter_offline_engine/pkg/webserver/tmp_templ_diff"
)

// Render the "base" template, creating a full HTML page corresponding to the given template file,
// with all available partials.
func (app *Application) buffered_render_page2(w http.ResponseWriter, tpl_file string, global_data PageGlobalData, tpl_data interface{}) {
	partials := append(glob("tpl/includes/*.tpl"), glob("tpl/tweet_page_includes/*.tpl")...)

	global_data.NotificationBubbles.NumMessageNotifications = len(app.Profile.GetUnreadConversations(app.ActiveUser.ID))
	if app.LastReadNotificationSortIndex != 0 {
		global_data.NotificationBubbles.NumRegularNotifications = app.Profile.GetUnreadNotificationsCount(
			app.ActiveUser.ID,
			app.LastReadNotificationSortIndex,
		)
	}
	global_data.ActiveUser = app.ActiveUser

	filenames := append(partials, get_filepath(tpl_file))

	var tpl *template.Template
	var err error

	_funcs := app.make_funcmap(global_data)
	funcs := sprig.FuncMap()
	for i := range _funcs {
		funcs[i] = _funcs[i]
	}
	if use_embedded == "true" {
		tpl, err = template.New("").Funcs(funcs).ParseFS(embedded_files, filenames...)
	} else {
		tpl, err = template.New("").Funcs(funcs).ParseFiles(filenames...)
	}
	panic_if(err)

	main_component := templ.FromGoHTML(tpl.Lookup("main"), tpl_data)

	buf := new(bytes.Buffer)
	Base(tpl, global_data, main_component).Render(context.Background(), buf)

	// Check against old version
	rec := httptest.NewRecorder()
	app.buffered_render_page(rec, tpl_file, global_data, tpl_data)
	diff, err := diffs.DiffStrings(rec.Body.String(), buf.String())
	panic_if(err)
	if diff != "" {
		println(diff)
		panic(diff)
	}

	_, err = buf.WriteTo(w)
	panic_if(err)
}

templ Base(go_tpl *template.Template, global_data PageGlobalData, main_component templ.Component) {
	<!doctype html>
	<html lang='en'>
		<head>
			<meta charset='utf-8'>
			<title>{ global_data.Title } | Offline Twitter</title>
			<link rel='stylesheet' href='/static/styles.css'>
			<link rel='shortcut icon' href='/static/twitter.ico' type='image/x-icon'>
			<link rel='stylesheet' href='/static/vendor/fonts.css'>
			<link rel="manifest" href="/static/pwa/manifest.json">
			<script src="/static/vendor/htmx.min.js" integrity="sha384-zUfuhFKKZCbHTY6aRR46gxiqszMk5tcHjsVFxnUo8VMus4kHGVdIYVbOYYNlKmHV" crossorigin="anonymous"></script>
			<script src="/static/vendor/htmx-extension-json-enc.js"></script>

			<script>
				if ('serviceWorker' in navigator) {
					navigator.serviceWorker.register('/static/pwa/service-worker.js')
						.then(function(registration) {
							console.log('Service Worker registered with scope:', registration.scope);
						}).catch(function(error) {
							console.log('Service Worker registration failed:', error);
						});
				}
			</script>

			<script>
				// Set default scrolling ("instant", "smooth" or "auto")
				htmx.config.scrollBehavior = "instant";

				document.addEventListener('DOMContentLoaded', function() {
					/**
					 * Consider HTTP 4xx and 500 errors to contain valid HTMX, and swap them as usual
					 */
					document.body.addEventListener('htmx:beforeSwap', function(e) {
						if (e.detail.xhr.status === 500) {
							e.detail.shouldSwap = true;
							e.detail.isError = true;
						} else if (e.detail.xhr.status >= 400 && e.detail.xhr.status < 500) {
							e.detail.shouldSwap = true;
							e.detail.isError = false;
						}
					});
				});
			</script>
		</head>
		<body>
			<header class="row search-bar">
				<a onclick="window.history.back()" class="button search-bar__back-button">
					<img class="svg-icon" src="/static/icons/back.svg" width="24" height="24"/>
				</a>
				<form class="search-bar__form" hx-get="/search" hx-push-url="true" hx-target="body" hx-swap="innerHTML show:window:top">
					<input id="searchBar" class="search-bar__input"
						name="q"
						placeholder="Search" type="text"
						if global_data.GetSearchText() != "" {
							value={global_data.GetSearchText()}
						}
						required
					/>
				</form>
			</header>
			@NavSidebar(go_tpl, global_data)
			<main>
				@main_component
			</main>
			<dialog
				id="image_carousel"
				class="image-carousel"
				onmousedown="event.button == 0 && event.target==this && this.close()"
			>
				<div class="image-carousel__padding">
					<a class="button image-carousel__close-button" onclick="image_carousel.close()">X</a>
					<img class="image-carousel__active-image" src="">
				</div>
			</dialog>
			<div class="toasts" id="toasts">
				for _, toast := range global_data.Toasts {
					@ToastTpl(toast)
				}
			</div>
		</body>
	</html>
}
